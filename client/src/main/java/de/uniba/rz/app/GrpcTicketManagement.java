package de.uniba.rz.app;

import de.uniba.rz.entities.general.Priority;
import de.uniba.rz.entities.general.Ticket;
import de.uniba.rz.entities.general.TicketException;
import de.uniba.rz.entities.general.Type;
import de.uniba.rz.io.rpc.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import io.grpc.stub.StreamObserver;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class GrpcTicketManagement implements TicketManagementBackend {

    private TicketServiceGrpc.TicketServiceStub asyncStub;


    private TicketServiceGrpc.TicketServiceBlockingStub syncStub;
    private ManagedChannel channel;

    public GrpcTicketManagement(String host, int port) {
        this(ManagedChannelBuilder.forAddress(host, port).usePlaintext());
    }

    public GrpcTicketManagement(ManagedChannelBuilder<?> channelBuilder) {
        this.channel = channelBuilder.build();

        // stubs are generated by the "protoc" tool (in our case during the gradle build)
        this.syncStub = TicketServiceGrpc.newBlockingStub(this.channel);
        this.asyncStub = TicketServiceGrpc.newStub(this.channel);
    }

    @Override
    public void triggerShutdown() {
        shutdown();
    }

    @Override
    public Ticket createNewTicket(String reporter, String topic, String description, Type type, Priority priority) throws TicketException {
        try {
            TicketRequest request = TicketRequest.newBuilder()
                    .setReporter(reporter)
                    .setTopic(topic)
                    .setDescription(description)
                    .setType(TicketType.valueOf(type.getValue()))
                    .setPriority(TicketPriority.valueOf(priority.getValue()))
                    .build();
            TicketIdResponse response;

            response = syncStub.post(request);

            return getTicketById(response.getId());
        } catch (StatusRuntimeException e) {
            System.err.println("The server is unresponsive.");
            this.shutdown();
            throw new TicketException("Serverproblems");
        }
    }
    boolean allTicketsRecieved;
    @Override
    public List<Ticket> getAllTickets() throws TicketException {
        try {
            ArrayList<Ticket> ret = new ArrayList<>();
            EntityRequest request = EntityRequest.newBuilder().setEntityType(EntityType.TICKETS).build();
            allTicketsRecieved = false;

            StreamObserver<TicketResponse> observer = new StreamObserver<>() {
                @Override
                public void onNext(TicketResponse value) {
                    Ticket newTicket = new Ticket();
                    newTicket.setId(value.getId());
                    newTicket.setReporter(value.getReporter());
                    newTicket.setTopic(value.getTopic());
                    newTicket.setDescription(value.getDescription());
                    newTicket.setType(Type.valueOf(value.getType().name()));
                    newTicket.setPriority(Priority.valueOf(value.getPriority().name()));
                    newTicket.setStatus(de.uniba.rz.entities.general.Status.valueOf(value.getStatus().name()));

                    ret.add(newTicket);
                }

                @Override
                public void onError(Throwable t) {
                    Status status = Status.fromThrowable(t);
                    System.err.println("Greeting failed: " + status);
                    shutdown();
                }

                @Override
                public void onCompleted() {
                    allTicketsRecieved = true;
                }
            };

            // execution of the asynchronous call
            this.asyncStub.getAll(request, observer);
            while (!allTicketsRecieved) {
                try {
                    Thread.sleep(50);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            return ret;
        } catch (StatusRuntimeException e) {
            System.err.println("The server is unresponsive.");
            this.shutdown();
        }
        throw new TicketException("Unknown exception while receiving tickets");
    }

    @Override
    public Ticket getTicketById(int id) throws TicketException {
        try {
            TicketIdRequest getRequest = TicketIdRequest.newBuilder().setId(id).build();
            TicketResponse getResponse = syncStub.get(getRequest);

            Ticket newTicket = new Ticket();
            newTicket.setId(getResponse.getId());
            newTicket.setReporter(getResponse.getReporter());
            newTicket.setTopic(getResponse.getTopic());
            newTicket.setDescription(getResponse.getDescription());
            newTicket.setType(Type.valueOf(getResponse.getType().name()));
            newTicket.setPriority(Priority.valueOf(getResponse.getPriority().name()));
            newTicket.setStatus(de.uniba.rz.entities.general.Status.valueOf(getResponse.getStatus().name()));

            return newTicket;
        } catch (StatusRuntimeException e) {
            System.err.println("The server is unresponsive.");
            this.shutdown();
            throw new TicketException("Serverproblems");
        }
    }

    @Override
    public Ticket acceptTicket(int id) throws TicketException {
        try {
            UpdateStatusRequest request = UpdateStatusRequest.newBuilder()
                    .setId(id)
                    .setStatus(TicketStatus.valueOf(de.uniba.rz.entities.general.Status.ACCEPTED.getValue()))
                    .build();
            syncStub.updateStatus(request);
            return getTicketById(id);
        } catch (StatusRuntimeException e) {
            System.err.println("The server is unresponsive.");
            this.shutdown();
            throw new TicketException("Serverproblems");
        }
    }

    @Override
    public Ticket rejectTicket(int id) throws TicketException {
        try {
            UpdateStatusRequest request = UpdateStatusRequest.newBuilder()
                    .setId(id)
                    .setStatus(TicketStatus.valueOf(de.uniba.rz.entities.general.Status.REJECTED.getValue()))
                    .build();
            syncStub.updateStatus(request);
            return getTicketById(id);
        } catch (StatusRuntimeException e) {
            System.err.println("The server is unresponsive.");
            this.shutdown();
            throw new TicketException("Serverproblems");
        }
    }

    @Override
    public Ticket closeTicket(int id) throws TicketException {
        try {
            UpdateStatusRequest request = UpdateStatusRequest.newBuilder()
                    .setId(id)
                    .setStatus(TicketStatus.valueOf(de.uniba.rz.entities.general.Status.CLOSED.getValue()))
                    .build();
            syncStub.updateStatus(request);
            return getTicketById(id);
        } catch (StatusRuntimeException e) {
            System.err.println("The server is unresponsive.");
            this.shutdown();
            throw new TicketException("Serverproblems");
        }
    }

    public void shutdown() {
        if (!channel.isShutdown()) {
            System.out.println("Trying to shut down the client . . .");
            try {
                channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }
}
